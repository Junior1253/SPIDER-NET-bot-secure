const { bot } = require('../lib')

// Stocke les groupes o√π la commande est activ√©e
let broadcastGroups = []

bot(
  {
    pattern: 'broadcast ?(.*)',
    desc: "Active/d√©sactive le broadcast ou envoie un message √† tous les groupes activ√©s",
    onlyGroup: true,
    type: 'group',
  },
  async (message, match) => {
    try {
      // V√©rifier si l'exp√©diteur est admin
      const groupMetadata = await message.client.groupMetadata(message.jid)
      const isAdmin = groupMetadata.participants
        .filter(p => p.admin !== null)
        .map(p => p.id)
        .includes(message.sender)

      if (!isAdmin) {
        return message.send("üö´ Seuls les administrateurs peuvent utiliser cette commande.")
      }

      // Activer/d√©sactiver dans un groupe
      if (match === "on") {
        if (!broadcastGroups.includes(message.jid)) {
          broadcastGroups.push(message.jid)
        }
        return message.send("‚úÖ Broadcast activ√© pour ce groupe.")
      }

      if (match === "off") {
        broadcastGroups = broadcastGroups.filter(g => g !== message.jid)
        return message.send("‚ùå Broadcast d√©sactiv√© pour ce groupe.")
      }

      // Envoyer le message dans tous les groupes activ√©s
      if (match && match.length > 0) {
        if (broadcastGroups.length === 0) {
          return message.send("‚ö†Ô∏è Aucun groupe n‚Äôa encore activ√© le broadcast.")
        }

        for (let groupId of broadcastGroups) {
          try {
            await message.client.sendMessage(groupId, { text: match })
          } catch (e) {
            console.log("Erreur envoi broadcast:", e)
          }
        }

        return message.send("üì¢ Message envoy√© √† tous les groupes activ√©s.")
      }

      // Si rien n‚Äôest pr√©cis√©
      return message.send("Exemple: .broadcast on / off / message")

    } catch (e) {
      console.error("Erreur broadcast:", e)
      message.send("‚ö†Ô∏è Une erreur est survenue lors du traitement de la commande.")
    }
  }
)
